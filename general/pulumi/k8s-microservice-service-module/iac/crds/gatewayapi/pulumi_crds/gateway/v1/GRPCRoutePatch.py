# coding=utf-8
# *** WARNING: this file was generated by crd2pulumi. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from ... import _utilities
from . import outputs
from ... import meta as _meta
from ._inputs import *

__all__ = ['GRPCRoutePatchArgs', 'GRPCRoutePatch']

@pulumi.input_type
class GRPCRoutePatchArgs:
    def __init__(__self__, *,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input['_meta.v1.ObjectMetaPatchArgs']] = None,
                 spec: Optional[pulumi.Input['GRPCRouteSpecPatchArgs']] = None):
        """
        The set of arguments for constructing a GRPCRoutePatch resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input['_meta.v1.ObjectMetaPatchArgs'] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        if api_version is not None:
            pulumi.set(__self__, "api_version", 'gateway.networking.k8s.io/v1')
        if kind is not None:
            pulumi.set(__self__, "kind", 'GRPCRoute')
        if metadata is not None:
            pulumi.set(__self__, "metadata", metadata)
        if spec is not None:
            pulumi.set(__self__, "spec", spec)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> Optional[pulumi.Input[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @api_version.setter
    def api_version(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_version", value)

    @property
    @pulumi.getter
    def kind(self) -> Optional[pulumi.Input[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @kind.setter
    def kind(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "kind", value)

    @property
    @pulumi.getter
    def metadata(self) -> Optional[pulumi.Input['_meta.v1.ObjectMetaPatchArgs']]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @metadata.setter
    def metadata(self, value: Optional[pulumi.Input['_meta.v1.ObjectMetaPatchArgs']]):
        pulumi.set(self, "metadata", value)

    @property
    @pulumi.getter
    def spec(self) -> Optional[pulumi.Input['GRPCRouteSpecPatchArgs']]:
        return pulumi.get(self, "spec")

    @spec.setter
    def spec(self, value: Optional[pulumi.Input['GRPCRouteSpecPatchArgs']]):
        pulumi.set(self, "spec", value)


class GRPCRoutePatch(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Union['_meta.v1.ObjectMetaPatchArgs', '_meta.v1.ObjectMetaPatchArgsDict']]] = None,
                 spec: Optional[pulumi.Input[Union['GRPCRouteSpecPatchArgs', 'GRPCRouteSpecPatchArgsDict']]] = None,
                 __props__=None):
        """
        Patch resources are used to modify existing Kubernetes resources by using
        Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
        one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
        Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
        [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
        additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
        GRPCRoute provides a way to route gRPC requests. This includes the capability
        to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
        Filters can be used to specify additional processing steps. Backends specify
        where matching requests will be routed.

        GRPCRoute falls under extended support within the Gateway API. Within the
        following specification, the word "MUST" indicates that an implementation
        supporting GRPCRoute must conform to the indicated requirement, but an
        implementation not supporting this route type need not follow the requirement
        unless explicitly indicated.

        Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
        accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
        ALPN. If the implementation does not support this, then it MUST set the
        "Accepted" condition to "False" for the affected listener with a reason of
        "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
        with an upgrade from HTTP/1.

        Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
        support HTTP/2 over cleartext TCP (h2c,
        https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
        upgrade from HTTP/1.1, i.e. with prior knowledge
        (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
        does not support this, then it MUST set the "Accepted" condition to "False"
        for the affected listener with a reason of "UnsupportedProtocol".
        Implementations MAY also accept HTTP/2 connections with an upgrade from
        HTTP/1, i.e. without prior knowledge.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] api_version: APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        :param pulumi.Input[str] kind: Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        :param pulumi.Input[Union['_meta.v1.ObjectMetaPatchArgs', '_meta.v1.ObjectMetaPatchArgsDict']] metadata: Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[GRPCRoutePatchArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Patch resources are used to modify existing Kubernetes resources by using
        Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
        one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
        Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
        [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
        additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
        GRPCRoute provides a way to route gRPC requests. This includes the capability
        to match requests by hostname, gRPC service, gRPC method, or HTTP/2 header.
        Filters can be used to specify additional processing steps. Backends specify
        where matching requests will be routed.

        GRPCRoute falls under extended support within the Gateway API. Within the
        following specification, the word "MUST" indicates that an implementation
        supporting GRPCRoute must conform to the indicated requirement, but an
        implementation not supporting this route type need not follow the requirement
        unless explicitly indicated.

        Implementations supporting `GRPCRoute` with the `HTTPS` `ProtocolType` MUST
        accept HTTP/2 connections without an initial upgrade from HTTP/1.1, i.e. via
        ALPN. If the implementation does not support this, then it MUST set the
        "Accepted" condition to "False" for the affected listener with a reason of
        "UnsupportedProtocol".  Implementations MAY also accept HTTP/2 connections
        with an upgrade from HTTP/1.

        Implementations supporting `GRPCRoute` with the `HTTP` `ProtocolType` MUST
        support HTTP/2 over cleartext TCP (h2c,
        https://www.rfc-editor.org/rfc/rfc7540#section-3.1) without an initial
        upgrade from HTTP/1.1, i.e. with prior knowledge
        (https://www.rfc-editor.org/rfc/rfc7540#section-3.4). If the implementation
        does not support this, then it MUST set the "Accepted" condition to "False"
        for the affected listener with a reason of "UnsupportedProtocol".
        Implementations MAY also accept HTTP/2 connections with an upgrade from
        HTTP/1, i.e. without prior knowledge.

        :param str resource_name: The name of the resource.
        :param GRPCRoutePatchArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GRPCRoutePatchArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 api_version: Optional[pulumi.Input[str]] = None,
                 kind: Optional[pulumi.Input[str]] = None,
                 metadata: Optional[pulumi.Input[Union['_meta.v1.ObjectMetaPatchArgs', '_meta.v1.ObjectMetaPatchArgsDict']]] = None,
                 spec: Optional[pulumi.Input[Union['GRPCRouteSpecPatchArgs', 'GRPCRouteSpecPatchArgsDict']]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GRPCRoutePatchArgs.__new__(GRPCRoutePatchArgs)

            __props__.__dict__["api_version"] = 'gateway.networking.k8s.io/v1'
            __props__.__dict__["kind"] = 'GRPCRoute'
            __props__.__dict__["metadata"] = metadata
            __props__.__dict__["spec"] = spec
            __props__.__dict__["status"] = None
        super(GRPCRoutePatch, __self__).__init__(
            'kubernetes:gateway.networking.k8s.io/v1:GRPCRoutePatch',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None) -> 'GRPCRoutePatch':
        """
        Get an existing GRPCRoutePatch resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = GRPCRoutePatchArgs.__new__(GRPCRoutePatchArgs)

        __props__.__dict__["api_version"] = None
        __props__.__dict__["kind"] = None
        __props__.__dict__["metadata"] = None
        __props__.__dict__["spec"] = None
        __props__.__dict__["status"] = None
        return GRPCRoutePatch(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="apiVersion")
    def api_version(self) -> pulumi.Output[Optional[str]]:
        """
        APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
        """
        return pulumi.get(self, "api_version")

    @property
    @pulumi.getter
    def kind(self) -> pulumi.Output[Optional[str]]:
        """
        Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        """
        return pulumi.get(self, "kind")

    @property
    @pulumi.getter
    def metadata(self) -> pulumi.Output[Optional['_meta.v1.outputs.ObjectMetaPatch']]:
        """
        Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
        """
        return pulumi.get(self, "metadata")

    @property
    @pulumi.getter
    def spec(self) -> pulumi.Output[Optional['outputs.GRPCRouteSpecPatch']]:
        return pulumi.get(self, "spec")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[Optional['outputs.GRPCRouteStatusPatch']]:
        return pulumi.get(self, "status")

